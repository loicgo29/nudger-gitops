name: "ðŸ”§ Bump KUSTOMIZE image (manual)"

on:
  workflow_dispatch:
    inputs:
      path:
        description: "Fichier kustomization.yaml (ex: apps/whoami/kustomization.yaml)"
        required: true
        type: string
      name:
        description: "images[].name (ex: whoami)"
        required: true
        type: string
      image_repo:
        description: "Repo d'image publique (ex: traefik/whoami)"
        required: true
        type: string
      image_tag:
        description: "Tag (ex: v1.10.1)"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Patch kustomization.yaml
        id: patch
        env:
          FILE: ${{ inputs.path }}
          NAME: ${{ inputs.name }}
          REPO: ${{ inputs.image_repo }}
          TAG:  ${{ inputs.image_tag }}
        run: |
          set -euo pipefail
          test -f "$FILE" || { echo "Introuvable: $FILE"; exit 1; }
          # S'assurer que images[] existe
          if ! yq '.images' "$FILE" >/dev/null 2>&1; then yq -i '.images = []' "$FILE"; fi
          # Update/insert par name
          if yq '.images[] | select(.name == env(NAME))' "$FILE" >/dev/null 2>&1; then
            yq -i '(.images[] | select(.name == env(NAME)).newName) = env(REPO) | (.images[] | select(.name == env(NAME)).newTag) = env(TAG)' "$FILE"
          else
            yq -i '.images += [{"name": env(NAME), "newName": env(REPO), "newTag": env(TAG)}]' "$FILE"
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}   # ou un PAT en secret GITOPS_TOKEN
          commit-message: "chore(kustomize): ${{ inputs.image_repo }}:${{ inputs.image_tag }} (name=${{ inputs.name }})"
          title: "chore(kustomize): ${{ inputs.image_repo }}:${{ inputs.image_tag }} (name=${{ inputs.name }})"
          body: "Path: `${{ steps.patch.outputs.file }}`"
          branch: chore/kustomize-bump-${{ github.run_id }}
          labels: |
            auto
            kustomize

