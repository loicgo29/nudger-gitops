name: "PR: Flux image updates (unique)"

on:
  push:
    branches:
      - flux-imageupdates       # déclenché automatiquement par Flux
  workflow_dispatch:
    inputs:
      head_branch:
        description: "Source branch (default: flux-imageupdates)"
        required: false
        default: flux-imageupdates

# Permissions nécessaires :
# - contents: push de la nouvelle branche
# - pull-requests: création/maj PR
# - issues: création/édition des labels
permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: auto-pr-flux-unique-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  create-unique-pr:
    runs-on: ubuntu-latest
    env:
      BASE_BRANCH: main

    steps:
      - name: Determine HEAD branch (push vs manual)
        id: head
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.head_branch }}" ]; then
            echo "HEAD_BRANCH=${{ github.event.inputs.head_branch }}" >> "$GITHUB_ENV"
          else
            echo "HEAD_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          fi
          echo "Using HEAD_BRANCH=$(sed -n 's/^HEAD_BRANCH=//p' $GITHUB_ENV)"

      - name: Checkout HEAD branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_BRANCH }}
          fetch-depth: 0

      - name: Ensure HEAD has commits ahead of BASE
        run: |
          set -euo pipefail
          echo "Comparing HEAD=${HEAD_BRANCH} to BASE=${BASE_BRANCH}"
          if [ "${HEAD_BRANCH}" = "${BASE_BRANCH}" ]; then
            echo "HEAD==BASE (lancé depuis main). Exit."
            exit 0
          fi
          git fetch origin "${BASE_BRANCH}"
          AHEAD=$(git rev-list --count "origin/${BASE_BRANCH}..HEAD")
          echo "Commits ahead of ${BASE_BRANCH}: ${AHEAD}"
          if [ "$AHEAD" -eq 0 ]; then
            echo "Aucun commit 'ahead' → rien à PR. Exit."
            exit 0
          fi

      - name: Create unique branch from HEAD
        run: |
          set -euo pipefail
          SHORT_SHA="$(git rev-parse --short=7 HEAD)"
          STAMP="$(date +%Y%m%d-%H%M%S)"
          NEW_BRANCH="${HEAD_BRANCH}-${SHORT_SHA}-${STAMP}"
          echo "NEW_BRANCH=${NEW_BRANCH}" >> "$GITHUB_ENV"
          git switch -c "${NEW_BRANCH}"
          git push origin HEAD:"${NEW_BRANCH}"
          echo "Created & pushed ${NEW_BRANCH}"

      - name: Ensure labels exist (idempotent)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh label create flux --color FFD700 --description "Flux automation" \
            || gh label edit flux --color FFD700 --description "Flux automation"
          gh label create automated-pr --color 1D76DB --description "Created by automation" \
            || gh label edit automated-pr --color 1D76DB --description "Created by automation"

      - name: Open PR from unique branch to main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh pr create \
            --head "${NEW_BRANCH}" \
            --base "${BASE_BRANCH}" \
            --title "chore(images): Flux updates (${NEW_BRANCH})" \
            --body "PR auto générée depuis \`${NEW_BRANCH}\` (bump d’images via Flux)." \
            --label flux --label automated-pr
          gh pr list --head "${NEW_BRANCH}" --base "${BASE_BRANCH}" --state open \
            --json number,url -q '.[0] | "PR #"+(.number|tostring)+" → "+.url'

