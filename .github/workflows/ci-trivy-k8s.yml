name: üîç Trivy (K8s Manifests + Images)

on:
  pull_request:
    paths:
      - 'apps/**'
      - 'clusters/**'
      - '**/*.yaml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  trivy-k8s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      - name: Scan Kubernetes manifests
        run: |
          echo "‚ñ∂ Running Trivy on Kubernetes manifests"
          trivy config . \
            --exit-code 0 \                  # üëà n'√©choue jamais
            --severity HIGH,CRITICAL \
            --ignorefile .trivyignore \
            --skip-dirs "smoke-tests" \
            --format table

      - name: Generate SARIF report
        if: always()
        run: |
          echo "‚ñ∂ Generating SARIF report for manifests"
          trivy config . \
            --exit-code 0 \
            --format sarif \
            --output trivy-k8s.sarif \
            --ignorefile .trivyignore \
            --skip-dirs "smoke-tests" || true
          ls -lh trivy-k8s.sarif || echo "‚ö†Ô∏è No SARIF generated"

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-k8s.sarif

  trivy-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.2

      - name: Scan container images
        run: |
          set -euo pipefail
          echo "‚ñ∂ Scanning fixed image list with Trivy"
          images=(
            "xwiki:17.3.0-mysql-tomcat"
            "mysql:8"
            "grafana/grafana:9.4.5"
            "nginx:1.27"
          )

          for img in "${images[@]}"; do
            echo "üîç Scanning $img..."
            trivy image \
              --exit-code 0 \               # üëà affiche seulement
              --severity HIGH,CRITICAL \
              "$img"
          done
