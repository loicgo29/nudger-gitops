apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: nudger-security-guardrails
spec:
  # On veut bloquer à l'admission (pas en background)
  validationFailureAction: Enforce
  background: false

  rules:
    # 1) Si on demande une exception (RW rootfs ou init root), il faut une justification
    - name: require-justification-for-exceptions
      match:
        any:
          - resources:
              kinds: ["Pod"]
              selector:
                matchExpressions:
                  - { key: security.nudger/allow-rw-rootfs, operator: In, values: ["true"] }
                  - { key: security.nudger/allow-init-root, operator: In, values: ["true"] }
      validate:
        message: "Exception sécurité sans justification: ajoutez annotation security.nudger/justification."
        pattern:
          metadata:
            annotations:
              security.nudger/justification: "?*"
      skipBackgroundRequests: true

    # 2) Auto-durcissement générique (opt-in via label séparé si tu veux,
    #    mais ici on l'applique par défaut à tous les Pods, avec exclusions)
    - name: auto-harden
      match:
        any:
          - resources:
              kinds: ["Pod"]
      exclude:
        any:
          - resources:
              # on évite de toucher aux namespaces système/sensibles
              namespaces:
                - kube-system
                - kyverno
                - longhorn-system
      mutate:
        patchStrategicMerge:
          spec:
            automountServiceAccountToken: false
            containers:
              - (name): "*"
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities: { drop: ["ALL"] }
                  readOnlyRootFilesystem: true
                  runAsNonRoot: true
            securityContext:
              runAsNonRoot: true
              seccompProfile: { type: RuntimeDefault }
      skipBackgroundRequests: true

    # 3) Forcer RO si pas d’opt-out explicite (label allow-rw-rootfs=true)
    - name: enforce-ro-rootfs
      match:
        any:
          - resources:
              kinds: ["Pod"]
      exclude:
        any:
          - resources:
              namespaces:
                - kube-system
                - kyverno
                - longhorn-system
      preconditions:
        all:
          - key: "{{ request.object.metadata.labels.\"security.nudger/allow-rw-rootfs\" || 'false' }}"
            operator: Equals
            value: "false"
      mutate:
        foreach:
          - list: "request.object.spec.containers"
            patchStrategicMerge:
              spec:
                containers:
                  - name: "{{ element.name }}"
                    securityContext:
                      readOnlyRootFilesystem: true
      skipBackgroundRequests: true

    # 4) Injection d’un init root (busybox) pour corriger les perms NGINX (opt-in)
    #    ⚠️ Ne contourne PAS PSA 'restricted' (le root reste bloqué par PSA).
    #    À utiliser dans un namespace moins strict (ex: integration) ou avec exemptions PSA.
    - name: inject-root-init-when-allowed
      match:
        any:
          - resources:
              kinds: ["Pod"]
              selector:
                matchLabels:
                  security.nudger/allow-init-root: "true"
      exclude:
        any:
          - resources:
              namespaces:
                - kube-system
                - kyverno
      mutate:
        patchStrategicMerge:
          spec:
            initContainers:
              - name: nudger-perms
                image: busybox:1.36
                command:
                  - sh
                  - -lc
                  - >
                    for d in /var/cache/nginx /var/run /var/log/nginx;
                    do mkdir -p $d; chown -R 101:101 $d; chmod -R 0775 $d; done
                securityContext:
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  seccompProfile: { type: RuntimeDefault }
      skipBackgroundRequests: true
