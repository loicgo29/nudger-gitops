apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: nudger-security-guardrails
spec:
  validationFailureAction: Enforce
  background: false
  rules:
    # Exceptions doivent être justifiées
    - name: require-justification-for-exceptions
      match:
        any:
          - resources:
              kinds: ["Pod"]
              selector:
                matchExpressions:
                  - { key: security.nudger/allow-rw-rootfs, operator: In, values: ["true"] }
                  - { key: security.nudger/allow-init-root, operator: In, values: ["true"] }
      validate:
        message: "Exception sécurité sans justification: ajoutez annotation security.nudger/justification."
        pattern:
          metadata:
            annotations:
              security.nudger/justification: "?*"

    # Auto-harden opt-in
    - name: auto-harden
      match:
        any:
          - resources:
              kinds: ["Pod"]
              selector:
                matchLabels:
                  security.nudger/auto-harden: "true"
      mutate:
        patchStrategicMerge:
          spec:
            automountServiceAccountToken: false
            securityContext:
              runAsNonRoot: true
              seccompProfile: { type: RuntimeDefault }
              fsGroup: 101
            containers:
              - (name): "*"
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities: { drop: ["ALL"] }
                  runAsNonRoot: true

    # Forcer RO si pas d’opt-in RW
    - name: enforce-ro-rootfs
      match:
        any:
          - resources:
              kinds: ["Pod"]
      preconditions:
        all:
          - key: "{{ request.object.metadata.labels.\"security.nudger/allow-rw-rootfs\" || 'false' }}"
            operator: Equals
            value: "false"
      mutate:
        foreach:
          - list: "request.object.spec.containers"
            patchStrategicMerge:
              spec:
                containers:
                  - name: "{{ element.name }}"
                    securityContext:
                      readOnlyRootFilesystem: true

    # Injecter un init root standard si autorisé
    - name: inject-root-init-when-allowed
      match:
        any:
          - resources:
              kinds: ["Pod"]
              selector:
                matchLabels:
                  security.nudger/allow-init-root: "true"
      mutate:
        patchStrategicMerge:
          spec:
            initContainers:
              - name: nudger-perms
                image: busybox:1.36
                command:
                  - sh
                  - -lc
                  - >
                    for d in /var/cache/nginx /var/run /var/log/nginx;
                    do mkdir -p $d; chown -R 101:101 $d; chmod -R 0775 $d; done
                securityContext:
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  seccompProfile: { type: RuntimeDefault }
