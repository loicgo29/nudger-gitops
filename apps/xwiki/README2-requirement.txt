1) Contexte & objectifs
	‚Ä¢	Cible : cluster K8s (d√©part : 1 n≈ìud), d√©ploiement via Ansible (r√¥les + templates), GitOps (FluxCD).
	‚Ä¢	Applis : XWiki 17.3.0-mysql-tomcat (1 replica), MySQL (StatefulSet).
	‚Ä¢	Stockage : Longhorn (SC DB d√©di√©e longhorn-db).
	‚Ä¢	Priorit√© : r√©silience (sauvegardes/restores) > scalabilit√© horizontale (XWiki mono-r√©plica).
	‚Ä¢	Exposition : Ingress NGINX (TLS LE), external-dns, cert-manager.
	‚Ä¢	S√©cu : NetworkPolicies ‚Äúdefault deny‚Äù, PodSecurity standards, SOPS/age (+ Vault/ESO pour secrets infra).
	‚Ä¢	Observabilit√© : kube-prometheus-stack (Prom/Alert/Grafana), m√©triques cluster/Longhorn/MySQL, logs simples (stdout) ou Loki.

‚ö†Ô∏è Point de vigilance imm√©diat : l‚Äôimage mysql:9.3.0 n‚Äôexiste pas c√¥t√© officiel Docker Hub (branche LTS 8.4, 9.0.x en preview). √Ä corriger/valider.

‚∏ª

2) Architecture cible (vue d‚Äôensemble)
	‚Ä¢	Namespaces : open4goods-prod, open4goods-staging, ingress-nginx, cert-manager, external-dns, observability.
	‚Ä¢	XWiki : Deployment (replicas=1), Service ClusterIP, Ingress TLS, 1 PVC RWO (xwiki-data, ext4).
	‚Ä¢	MySQL : StatefulSet, Service ClusterIP, 1 PVC RWO 50Gi (extensible, xfs, SC longhorn-db).
	‚Ä¢	Ingress : NGINX L7 unique, HSTS, TLS 1.2+, HTTP‚ÜíHTTPS, server_tokens off, proxy-body-size adapt√©.
	‚Ä¢	DNS : external-dns (OVH aujourd‚Äôhui, Cloudflare demain possible).
	‚Ä¢	Certs : cert-manager (ClusterIssuer LE staging + prod).

‚∏ª

3) Stockage & Longhorn
	‚Ä¢	SC par d√©faut : replicas=2, expansion activ√©e.
	‚Ä¢	SC DB longhorn-db (MySQL) : replicas=3, dataLocality=best-effort, xfs, allowVolumeExpansion=true.
	‚Ä¢	Backups : BackupTarget S3 + RecurringJobs (snapshots horaires, backups quotidiens).
	‚Ä¢	Anti-affinit√© r√©plicas Longhorn (n≈ìuds/zonings diff√©rents) ‚Äî √† effet limit√© tant que tu n‚Äôas qu‚Äôun seul n≈ìud.
	‚Ä¢	R√©alit√© 1 n≈ìud : r√©plication Longhorn ‚â† tol√©rance de panne. Accepte la r√©duction de SLA jusqu‚Äô√† ajout de n≈ìuds.

‚∏ª

4) R√©seau & s√©curit√©
	‚Ä¢	NetworkPolicies (z√©ro-trust par namespace) :
	‚Ä¢	Default deny ingress/egress.
	‚Ä¢	Allow : ingress-nginx ‚Üí XWiki:8080, XWiki ‚Üí MySQL:3306, apps ‚Üí kube-dns:53 tcp/udp, cert-manager ‚Üî ACME 80/443, external-dns ‚Üí provider.
	‚Ä¢	Pod Security : restricted si possible (sinon baseline) :
	‚Ä¢	runAsNonRoot: true, readOnlyRootFilesystem: true (sauf DB), seccompProfile: RuntimeDefault, capabilities.drop: [ALL].
	‚Ä¢	RBAC : √©viter les ClusterRoleBinding larges. Un admin toi seul.

‚∏ª

5) Observabilit√© & logs
	‚Ä¢	kube-prometheus-stack : Prometheus, Alertmanager, Grafana.
	‚Ä¢	Dashboards : cluster, Longhorn, MySQL (latences, buffer pool, connections), XWiki/Tomcat (si JMX).
	‚Ä¢	Logs : minimal kubectl logs OK; Loki (option light) si centralisation n√©cessaire.
	‚Ä¢	Alerting : r√®gles de base (PVC en erreur, pod crashloop, Longhorn volume degraded, certs expirants, 5xx Ingress).

‚∏ª

6) Backups & restauration (DR)
	‚Ä¢	XWiki : cronjob K8s qui appelle l‚ÄôAPI d‚Äôexport XWiki ‚Üí push S3 (avec r√©tention).
	‚Ä¢	MySQL (optionnel +) : mysqldump/xtrabackup via CronJob ‚Üí S3 (coh√©rence logique).
	‚Ä¢	Longhorn : snapshots + backups S3 comme filet de s√©cu.
	‚Ä¢	Runbooks :
	‚Ä¢	Restore XWiki export (d√©crit pas √† pas).
	‚Ä¢	Restore PVC Longhorn (attach/restore, verifs post-restore).
	‚Ä¢	Tests r√©guliers de restore (staging).

‚∏ª

7) CI/GitOps & images
	‚Ä¢	FluxCD d√©j√† en place (GitRepository/Kustomizations).
	‚Ä¢	Renovate : activ√© pour bump images/charts.
	‚Ä¢	Trivy (CI) : scan images blocking.
	‚Ä¢	Pin images par digest (@sha256:) quand possible (prod).

‚∏ª

8) Ressources & sant√©
	‚Ä¢	XWiki : requests (ex. 200m CPU, 512Mi RAM) / limits (2 CPU, 2Gi) + readinessProbe/livenessProbe HTTP (tomcat).
	‚Ä¢	MySQL : requests (ex. 500m CPU, 1‚Äì2Gi RAM) / limits (1‚Äì2 CPU, 3‚Äì4Gi) ; config utf8mb4 + collation ; probes TCP/exec.
	‚Ä¢	QoS : √©viter le throttling lors de rebuild Longhorn ‚Üí poser des requests explicites.

‚∏ª

9) Secrets & config
	‚Ä¢	SOPS + age : secrets applicatifs (XWiki DB creds).
	‚Ä¢	Vault + ESO : secrets infra (ACME account, external-dns tokens, root DB). Option : tout basculer sous Vault √† terme.
	‚Ä¢	ConfigMaps : JAVA_OPTS, conf MySQL (charset/collation).
	‚Ä¢	Jamais exposer MySQL en public. ClusterIP only.

‚∏ª

10) Plan de d√©ploiement (Ansible)
	‚Ä¢	R√¥les (tags) :
	‚Ä¢	longhorn : install + SC d√©faut + SC longhorn-db + backupTarget + recurringJobs.
	‚Ä¢	ingress : ingress-nginx + annotations TLS/headers.
	‚Ä¢	certs : cert-manager + ClusterIssuers (staging/prod).
	‚Ä¢	external_dns : provider OVH (Cloudflare pr√™t).
	‚Ä¢	observability : kube-prometheus-stack (+ Loki option).
	‚Ä¢	mysql_ss : StatefulSet, Service, PVC.
	‚Ä¢	xwiki : Deployment, Service, Ingress, ConfigMap, Secret, CronJobs backup API.
	‚Ä¢	netpol : default deny + allow sp√©cifiques.
	‚Ä¢	backups : CronJobs Longhorn/XWiki/MySQL, policies S3.
	‚Ä¢	GitOps repo : apps/xwiki/, apps/mysql/, infra/longhorn/, infra/ingress/, infra/cert-manager/, infra/external-dns/, infra/observability/, policies/.
	‚Ä¢	Livrables : templates .j2, README par dossier, runbooks restore, fichiers SOPS.

‚∏ª

11) Check-list prod (√† cocher)
	‚Ä¢	Image MySQL corrig√©e (8.4 LTS ? 9.0.x valid√©e ?) + conf charset/collation.
	‚Ä¢	StorageClass longhorn-db (xfs, replicas=3, expansion OK).
	‚Ä¢	MySQL OK (PVC 50Gi bound, probes green, CRUD perf smoke).
	‚Ä¢	XWiki accessible via Ingress TLS (LE prod), headers durcis, redirects OK.
	‚Ä¢	NetworkPolicies test√©es (deny/allow).
	‚Ä¢	Backups XWiki + Longhorn tournent ; restore test√© (staging).
	‚Ä¢	Dashboards Grafana (cluster/Longhorn/MySQL) + alertes basiques.
	‚Ä¢	Renovate actif, Trivy en CI, images pinned.

‚∏ª

12) D√©cisions √† prendre (claires, prioris√©es)

üî¥ Bloquants (√† d√©cider maintenant)
	1.	Version MySQL : mysql:9.3.0 est douteux. Choix recommand√© :
	‚Ä¢	MySQL 8.4 LTS (officiel), ou
	‚Ä¢	MySQL 9.0.x si valid√© par release notes et compat XWiki.
	2.	S3 BackupTarget : endpoint, bucket, r√©gion, chiffrement, r√©tention. Qui paye et qui poss√®de les cl√©s ?
	3.	FQDN XWiki (prod/staging) : ex. xwiki.open4goods.fr (aujourd‚Äôhui OVH). TTL bas 24‚Äì48h avant cutover.
	4.	Politique de restore officielle : RPO/RTO cibles et fr√©quence de tests de restore (mensuel/trimestriel ?).

üü† Importants (semaine en cours)
	5.	Scopes NetworkPolicies exacts (ports, namespaces). Liste blanche minimale valid√©e.
	6.	Param√®tres JVM XWiki (heap, GC, MaxGCPauseMillis=200 valid√© ?). Besoin JMX ?
	7.	Dimensionnement MySQL : innodb_buffer_pool_size, max_connections, I/O pattern. Fichier conf √† figer.
	8.	Quotas Longhorn : rebuildReservedBandwidth et priorit√©s I/O pendant rebuild (√©viter impact XWiki).
	9.	Secrets : p√©rim√®tre SOPS vs Vault/ESO. Qui g√®re les cl√©s age/Vault (op√©rationnellement) ?
	10.	Renovate : r√®gles d‚Äôauto-PR (images, charts), inclure digest pinning.

üü° √Ä clarifier (non bloquants)
	11.	Cloudflare : passage quand ? (CDN/DoS, Page Rules, certs).
	12.	Loki : le veux-tu maintenant ou plus tard ?
	13.	HPA : pas pertinent pour XWiki (stateful assets) ; OK de ne pas en mettre pour l‚Äôinstant ?
	14.	Anti-affinit√© pods : utile quand tu auras ‚â•2 n≈ìuds ; on l‚Äôajoute maintenant (inactive) ou plus tard ?
	15.	Plan multi-environnements : open4goods-staging actif avant cutover prod pour dress rehearsal.

‚∏ª

13) Points de friction (honn√™tes)
	‚Ä¢	1 seul n≈ìud : pas de tol√©rance de panne r√©elle, m√™me avec Longhorn (r√©plicas sur m√™me n≈ìud).
	‚Ä¢	XWiki mono-r√©plica : indispo pendant restart/upgrade ‚Üí pr√©voir fen√™tres de maintenance.
	‚Ä¢	Rebuild Longhorn : peut throttler l‚ÄôI/O ; poser des requests et surveiller.
	‚Ä¢	Cutover DNS : effets TTL ; plan de rollback indispensable (A/B).

‚∏ª

14) Prochaines √©tapes (op√©rationnelles)
	1.	Valider les d√©cisions üî¥ ci-dessus (MySQL version, S3, FQDN, RPO/RTO).
	2.	G√©n√©rer les r√¥les Ansible + templates .j2 (structure ¬ß10) avec tags clairs.
	3.	D√©ployer en staging, tester backups/restore (XWiki export + Longhorn).
	4.	Bascule prod : TTL bas, fen√™tre, runbook, rollback document√©.

‚∏ª

Si tu veux, je te fournis ensuite :
	‚Ä¢	les templates .j2 (StatefulSet MySQL, Deployment/Ingress XWiki, SC Longhorn, NetPols),
	‚Ä¢	un playbook Ansible minimal avec tags,
	‚Ä¢	les CronJobs (export XWiki API + backups Longhorn),
	‚Ä¢	les ClusterIssuers (LE staging/prod) + external-dns OVH.

Questions finales (rapides)
	‚Ä¢	MySQL : on part sur 8.4 LTS ?
	‚Ä¢	S3 : donne-moi endpoint / bucket / r√©gion / r√©tention (jours) / chiffrement (SSE-S3 ou SSE-KMS).
	‚Ä¢	FQDN prod/staging exacts ?
	‚Ä¢	RPO/RTO cibles ? (ex. RPO 24h, RTO 2h)
	‚Ä¢	Loki tout de suite ou plus tard ?
	‚Ä¢	Cloudflare : on migre maintenant ou on reste OVH pour la bascule ?

Je reste critique : tant que ces 4 points (image MySQL, S3, FQDN, RPO/RTO) ne sont pas fig√©s, pas de prod.
