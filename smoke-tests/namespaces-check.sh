#!/usr/bin/env bash
set -euo pipefail

expected_ns=("open4goods-prod" "open4goods-integration" "open4goods-recette" "observability")
declare -A env_map=(
  ["open4goods-prod"]="prod"
  ["open4goods-integration"]="integration"
  ["open4goods-recette"]="recette"
  ["observability"]="observability"
)

declare -A psa_map=(
  ["open4goods-prod"]="restricted"
  ["open4goods-integration"]="baseline"
  ["open4goods-recette"]="baseline"
  ["observability"]="baseline"
)

echo "==> V√©rification des namespaces et labels"

for ns in "${expected_ns[@]}"; do
  echo "--> Namespace: $ns"

  # V√©rifie que le namespace existe
  if ! kubectl get ns "$ns" >/dev/null 2>&1; then
    echo "‚ùå KO: namespace manquant: $ns"
    exit 1
  fi

  # V√©rifie le label `environment`
  env_actual=$(kubectl get ns "$ns" -o jsonpath='{.metadata.labels.environment}')
  env_expected="${env_map[$ns]}"
  if [[ "$env_actual" != "$env_expected" ]]; then
    echo "‚ùå KO: label environment attendu=$env_expected, trouv√©=$env_actual pour $ns"
    exit 1
  fi
  echo "‚úÖ label environment = $env_actual"

  # V√©rifie les PSA (baseline ou restricted selon le namespace)
  psa_expected="${psa_map[$ns]}"
  for k in enforce warn audit; do
    v=$(kubectl get ns "$ns" -o jsonpath="{.metadata.labels.pod-security\.kubernetes\.io/$k}")
    if [[ "$v" != "$psa_expected" ]]; then
      echo "‚ùå KO: PSA $k attendu=$psa_expected, trouv√©=$v pour $ns"
      exit 1
    fi
  done
  echo "‚úÖ PSA = $psa_expected (enforce/warn/audit)"
done

echo
echo "üéâ OK: Tous les namespaces sont pr√©sents, labellis√©s, et conformes √† la politique PSA attendue."
